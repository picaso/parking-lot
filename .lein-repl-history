(+ 9 9)
(less-than-80-percent?  '())
(less-than-80-percent? ())
(def full-lot 
  {:lot '(1 2 3 4 5 6 7 8 9 10) :size 10})
(less-than-80-percent? full-lot)
(def lot (atom []]))
(def lot (atom []))
(def manager {:lot lot})
(reset lot [:car])
(reset! lot [:car])
@manager
@(manager :lot)
(def lot (atom ( {:lot [] :size 0}))
)
(def lot (atom ( {:lot [] :size 0})))
(def lot (atom ( {:lot:[] :size: 0})))
(def lot (atom ( {:lot [] :size 0})))
(def lot (atom  {:lot [] :size 0}))
@atom
@atom:lot
@atom :lot
@(atom :lot)
(reset! (atom :lot) [:car] )
@(atom :lot)
(reset! (atom :lot) [:car :car2 :car3 ] )
@(atom :lot)
@(atom :car)
@(atom :carsd)
@()
(reset! (lot :lot) [:car :car2 :car3 ] )
@(lot :lot)
(def lot (atom  {:lot [] :size 0}))
@(lot)
@(lot lot)
@((lot) lot)
@((lot) :lot)
@(lot :lot)
(lot :lot)
(lot)
(def lot (atom  {:lot [] :size 0}))
@lot
(@lot :lot)
(reset! (@lot :lot) [ss sss])
(reset! (@lot :lot) [:ss :sss])
(reset! lot  {:lot [:car :core], :size 30})
(repl (+ 2 2))
(name lot)
(name @lot)
(name (@lot :lot))
(name lot)
(name :lot)
(def :lot [])
(def :lot (list ))
(def lot (list ))
(name lot)
(identity lot)
(def lot (list 4 4 4))
(identity lot)
(meta lot)
 (def lot {:lot [:car :car2 :car3] :size 3})
  (def lot2 {:lot [:car :car2 ] :size 3})
  (def manager {:lots [lot lot2]})
(lot-full? (first (manager :lots))
0
)
(lot-full? (first (manager :lots)))
(map (lot-full? (first (manager :lots)))
)
(map (lot-full? (manager :lots)))
(manager :lots)
(filter (lot-full? (manager :lots)))
(filter lot-full? (manager :lots))
(filter (not lot-full?) (manager :lots))
(filter not lot-full? (manager :lots))
(filter lot-full? (manager :lots))
